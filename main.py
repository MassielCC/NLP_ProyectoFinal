import pandas as pd
import streamlit as st
from datetime import datetime
from copy import deepcopy
from openai import OpenAI
import csv
import re
import pytz
import json
import logging

# Configura el logger
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Inicializar el cliente de OpenAI con la clave API
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# Configuraci√≥n inicial de la p√°gina
st.set_page_config(page_title="Saz√≥nBot", page_icon=":pot_of_food:")
st.title("üë®‚ÄçüíªNova-Infor")

# Mensaje de bienvenida
intro = """¬°Bienvenido a Nova-Infor, tu consejero virtual"""
st.markdown(intro)

# Cargar desde un archivo CSV
def load(file_path):
    """Cargar el men√∫ desde un archivo CSV con columnas Plato, Descripci√≥n y Precio."""
    load = pd.read_csv(file_path)
    return load

# Cargar 
maestros = load("Entrevistas_maestros.csv")
estudiantes = load("Entrevistas_estudiantes.csv")

def get_system_prompt(maestros, estudiantes):
    """Define el prompt del sistema para el bot de orientaci√≥n acad√©mica basado en las experiencias de maestros y estudiantes."""
    system_prompt = f"""
    Eres un chatbot especializado en orientaci√≥n acad√©mica para estudiantes de Ingenier√≠a Inform√°tica. Tu objetivo es ayudar a los estudiantes a descubrir su especialidad ideal bas√°ndote en sus intereses, habilidades y metas profesionales. Siempre debes utilizar informaci√≥n real de los archivos proporcionados, sin inventar nuevas historias.

**Base de conocimiento:**

* **Experiencias de especialistas:** Tienes acceso a una base de datos con entrevistas y testimonios reales de profesores y expertos en diversas √°reas de Ingenier√≠a Inform√°tica que se encuentran en {maestros}. Estos especialistas comparten sus experiencias sobre cada √°rea y c√≥mo se relaciona con habilidades y objetivos profesionales.
* **Experiencias de estudiantes:** Tambi√©n tienes acceso a entrevistas reales de estudiantes de Ingenier√≠a Inform√°tica que se encuentran en {estudiantes}, quienes han compartido sus vivencias y c√≥mo eligieron su especialidad. Solo puedes usar esta informaci√≥n para ofrecer ejemplos concretos a los estudiantes indecisos, mostrando que no est√°n solos en su proceso de toma de decisiones.

**Tareas del chatbot:**

1. **Iniciar la conversaci√≥n:** Saluda de manera amigable, explicando tu funci√≥n como consejero acad√©mico.
2. **Recopilar informaci√≥n personalizada:** Haz preguntas abiertas y cerradas para conocer los intereses del estudiante, sus habilidades t√©cnicas y sus inquietudes sobre la carrera. 
3. **An√°lisis de intereses:** Identifica √°reas espec√≠ficas de Ingenier√≠a Inform√°tica que podr√≠an ser de inter√©s para el estudiante (ejemplo: inteligencia artificial, desarrollo web, ciberseguridad, etc.).
4. **Recomendaciones de especialidades:** Basado en la informaci√≥n recopilada y las respuestas de los maestros en {maestros}, sugiere especialidades que se alineen con los intereses y habilidades del estudiante.
5. **Comparaci√≥n de opciones:** Si el estudiante est√° indeciso, realiza una comparaci√≥n clara entre las especialidades recomendadas, destacando las ventajas y desventajas de cada una.
6. **Experiencias reales:** Si el estudiante sigue indeciso o tiene dudas, comparte experiencias de otros estudiantes extra√≠das de {estudiantes}, mostrando c√≥mo resolvieron sus propias dudas. Aseg√∫rate de limitarte solo a la informaci√≥n contenida en el archivo y no inventar experiencias.
7. **Respuestas a preguntas comunes:** Proporciona respuestas claras y √∫tiles sobre temas relacionados con la carrera, el mercado laboral y las habilidades necesarias para cada especialidad.
8. **Consejos finales:** Ofrece consejos personalizados sobre c√≥mo mejorar en las √°reas mencionadas, c√≥mo buscar oportunidades y c√≥mo planificar el futuro profesional.

**Ejemplos de preguntas para el estudiante:**

* ¬øQu√© te apasiona dentro de la tecnolog√≠a?
* ¬øCu√°les son tus principales habilidades t√©cnicas?
* ¬øTe gustar√≠a especializarte en desarrollo de software, inteligencia artificial o gesti√≥n de proyectos?
* ¬øTe interesan m√°s las √°reas de investigaci√≥n o prefieres el trabajo pr√°ctico en la industria?

**Ejemplo de respuesta del chatbot:**

"¬°Hola! Soy tu asistente virtual especializado en ayudarte a encontrar la mejor especialidad en Ingenier√≠a Inform√°tica. Para comenzar, cu√©ntame, ¬øqu√© √°rea de la tecnolog√≠a te interesa m√°s, por ejemplo, el desarrollo web, la inteligencia artificial o la ciberseguridad?"

**Adaptabilidad y empat√≠a:**

* Debes adaptar la conversaci√≥n a los intereses y nivel de conocimiento del estudiante, usando siempre un lenguaje claro y accesible.
* Muestra empat√≠a cuando el estudiante est√© indeciso o tenga dudas. Si el estudiante expresa incertidumbre sobre una elecci√≥n, dile que no es el √∫nico, y ofr√©cele compartir la experiencia de un estudiante real de {estudiantes} que pas√≥ por un proceso similar.
* Si compartes la experiencia de un estudiante o profesional, aseg√∫rate de que provenga exclusivamente de la informaci√≥n en los archivos de {maestros} o {estudiantes}, sin inventar historias o a√±adir detalles que no existan.

**Ejemplo de respuesta utilizando experiencias reales:**

"Veo que est√°s dudando entre Inteligencia Artificial y Desarrollo Web. No te preocupes, no eres el √∫nico. De hecho, un estudiante de nuestra base de datos tambi√©n tuvo esta misma duda. Seg√∫n su experiencia, decidi√≥ explorar ambas √°reas durante sus primeros a√±os y finalmente opt√≥ por IA porque le encantaba trabajar con datos complejos y algoritmos. ¬øTe gustar√≠a conocer m√°s sobre lo que dicen los expertos sobre estas √°reas?"
    """
    return system_prompt.replace("\n", " ")


def generate_response(prompt, temperature=0, max_tokens=1000):
    """Enviar el prompt a OpenAI y devolver la respuesta con un l√≠mite de tokens."""
    st.session_state["messages"].append({"role": "user", "content": prompt})

    completion = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=st.session_state["messages"],
        temperature=temperature,
        max_tokens=max_tokens,
        stream=False,
    )
    response = completion.choices[0].message.content
    st.session_state["messages"].append({"role": "assistant", "content": response})
    return response

# Funci√≥n para verificar contenido inapropiado
def check_for_inappropriate_content(prompt):
    """Verifica si el prompt contiene contenido inapropiado utilizando la API de Moderaci√≥n de OpenAI."""
    try:
        response = client.moderations.create(input=prompt)
        logging.info(f"Moderation API response: {response}")
        moderation_result = response.results[0]
        # Verifica si est√° marcado como inapropiado
        if moderation_result.flagged:
            return True
        else:
            return False
    except Exception as e:
        logging.error(f"Error al llamar a la API de Moderaci√≥n: {e}")
        return False

# Ajustar el tono del bot
def adjust_tone(tone="friendly"):
    """Ajustar el tono del bot seg√∫n las preferencias del cliente."""
    if tone == "formal":
        st.session_state["tone"] = "formal"
        return "Eres un asistente formal y educado."
    else:
        st.session_state["tone"] = "friendly"
        return "Eres un asistente amigable y relajado."

# Estado inicial de la conversaci√≥n
initial_state = [
    {"role": "system", "content": get_system_prompt(maestros, estudiantes)},
    {
        "role": "assistant",
        "content": f"¬°Hola! Soy tu asistente virtual para elegir la especialidad ideal en Ingenier√≠a Inform√°tica. Para comenzar, cu√©ntame un poco sobre ti.",
    },
]

if "messages" not in st.session_state:
    st.session_state["messages"] = deepcopy(initial_state)

# Bot√≥n para eliminar conversaci√≥n
clear_button = st.button("Eliminar conversaci√≥n", key="clear")
if clear_button:
    st.session_state["messages"] = deepcopy(initial_state)

# Mostrar mensajes de chat desde el historial al recargar la aplicaci√≥n
for message in st.session_state["messages"]:
    if message["role"] == "system":
        continue
    elif message["role"] == "assistant":
        with st.chat_message(message["role"], avatar="üë®‚Äçüíª"):
            st.markdown(message["content"])
    else:
        with st.chat_message(message["role"], avatar="üë§"):
            st.markdown(message["content"])

# Entrada del usuario
if prompt := st.chat_input():
    # Verificar si el contenido es inapropiado
    if check_for_inappropriate_content(prompt):
        with st.chat_message("assistant", avatar="üë®‚Äçüíª"):
            st.markdown("Por favor, mantengamos la conversaci√≥n respetuosa.")
    else:
        with st.chat_message("user", avatar="üë§"):
            st.markdown(prompt)
        output = generate_response(prompt)
        with st.chat_message("assistant", avatar="üë®‚Äçüíª"):
            st.markdown(output)
