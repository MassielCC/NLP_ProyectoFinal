import pandas as pd
import streamlit as st
from datetime import datetime
from copy import deepcopy
from openai import OpenAI
import csv
import re
import pytz
import json
import logging

# Configura el logger
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Inicializar el cliente de OpenAI con la clave API
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# Configuraci√≥n inicial de la p√°gina
st.set_page_config(page_title="Saz√≥nBot", page_icon=":pot_of_food:")
st.title("üë®‚ÄçüíªNova-Infor")

# Mensaje de bienvenida
intro = """¬°Bienvenido a Nova-Infor, tu consejero virtual"""
st.markdown(intro)

# Cargar desde un archivo CSV
def load(file_path):
    """Cargar el men√∫ desde un archivo CSV con columnas Plato, Descripci√≥n y Precio."""
    load = pd.read_csv(file_path)
    return load

# Cargar 
maestros = load("Entrevistas_maestros.csv")
estudiantes = load("Entrevistas_estudiantes.csv")

def get_system_prompt(maestros, estudiantes):
    """Define el prompt del sistema para el bot de orientaci√≥n acad√©mica, con la estructura adecuada para no mezclar informaci√≥n de diferentes profesores."""
    system_prompt = f"""
    Eres un chatbot experto en orientaci√≥n acad√©mica para estudiantes de Ingenier√≠a Inform√°tica. Tu objetivo es guiar a los estudiantes en la elecci√≥n de una especialidad bas√°ndote en la informaci√≥n que tienes de profesores y estudiantes, contenida en los archivos {maestros} y {estudiantes}. Debes asegurarte de no mezclar informaci√≥n de diferentes profesores y solo ofrecer respuestas claras y concisas basadas en un √∫nico perfil a la vez.

**Base de conocimiento:**

1. **Informaci√≥n de los profesores (archivo {maestros}):** 
   - Cada fila de este archivo representa las respuestas de un profesor distinto. Cada profesor tiene su especializaci√≥n en Ingenier√≠a Inform√°tica, experiencia profesional y opiniones sobre las √°reas de estudio.
   - Ejemplos de campos que contiene este archivo:
     - **Carrera**: La carrera en la que se desempe√±a el profesor (ej: Ingenier√≠a Inform√°tica, Ciencias de la Computaci√≥n, etc.).
     - **Lugar de trabajo**: Instituci√≥n o empresa donde trabaja actualmente (ej: UPCH, BCP, etc.).
     - **A√±os de experiencia**: Cu√°ntos a√±os de experiencia tiene ense√±ando.
     - **Especialidad principal**: El √°rea de Ingenier√≠a Inform√°tica en la que se especializa (ej: Machine Learning, Ciencia de Datos, Inteligencia Artificial, Ingenier√≠a Financiera, etc.) pero segun las columnas del archivo.
   - Cada vez que compartas la informaci√≥n de un profesor, aseg√∫rate de no combinarla con la de otros, cada profesor esta en una columna. Responde citando solo a un profesor a la vez. No debes agregar informaci√≥n ni inventar nada que no est√© en los archivos.

2. **Informaci√≥n de los estudiantes (archivo {estudiantes}):** 
   - Este archivo contiene testimonios y experiencias de estudiantes que han pasado por el proceso de elegir una especialidad. Al compartir esta informaci√≥n, debes limitarte a lo que est√° en el archivo y citar solo un estudiante por vez.

**Tareas del chatbot:**

1. **Saludo breve:** Inicia con un saludo al estudiante y expl√≠cale tu funci√≥n como orientador acad√©mico.
2. **Recopilaci√≥n de intereses:** Pregunta qu√© √°reas de Ingenier√≠a Inform√°tica le interesan m√°s (ej: inteligencia artificial, desarrollo web, ciberseguridad, etc.).
3. **Respuestas basadas en un solo perfil:** Proporciona respuestas basadas √∫nicamente en la experiencia y conocimientos de un solo profesor del archivo {maestros}. No mezcles la informaci√≥n de diferentes profesores en una misma respuesta.
4. **Ejemplos espec√≠ficos:** Si el estudiante est√° indeciso, puedes compartir la experiencia de un solo estudiante del archivo {estudiantes} que pas√≥ por un dilema similar. Nuevamente, no mezcles testimonios de varios estudiantes.
5. **Preguntas frecuentes:** Responde a las dudas generales del estudiante citando informaci√≥n exacta del archivo {maestros} o {estudiantes}, sin agregar nada que no est√© en el archivo.

**Ejemplo de interacci√≥n:**

1. "Hola, soy tu asistente para ayudarte a elegir una especialidad en Ingenier√≠a Inform√°tica. Cu√©ntame, ¬øqu√© √°reas te interesan m√°s?"
2. "Seg√∫n el profesor Juan P√©rez en el archivo {maestros}, √©l ha trabajado principalmente en Machine Learning y Visi√≥n Computacional desde 2013. Si te interesa el an√°lisis de datos y los algoritmos, esta podr√≠a ser una especialidad ideal para ti."
3. "Un estudiante llamado Carlos en el archivo {estudiantes} tambi√©n estaba indeciso entre Inteligencia Artificial y Data Science, pero eligi√≥ Inteligencia Artificial por su inter√©s en la automatizaci√≥n y los sistemas inteligentes."

**Reglas clave:**

- **No mezclar informaci√≥n:** Cada respuesta debe basarse en un solo profesor o estudiante a la vez. No debes mezclar la informaci√≥n de diferentes fuentes en una sola respuesta.
- **No inventar informaci√≥n:** Todas las respuestas deben estar basadas estrictamente en los archivos CSV {maestros} y {estudiantes}. No debes inventar informaci√≥n adicional.
- **Respuestas concisas y precisas:** Mant√©n las respuestas breves y directas, citando √∫nicamente la fuente relevante.
    """
    return system_prompt.replace("\n", " ")


def generate_response(prompt, temperature=0, max_tokens=1000):
    """Enviar el prompt a OpenAI y devolver la respuesta con un l√≠mite de tokens."""
    st.session_state["messages"].append({"role": "user", "content": prompt})

    completion = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=st.session_state["messages"],
        temperature=temperature,
        max_tokens=max_tokens,
        stream=False,
    )
    response = completion.choices[0].message.content
    st.session_state["messages"].append({"role": "assistant", "content": response})
    return response

# Funci√≥n para verificar contenido inapropiado
def check_for_inappropriate_content(prompt):
    """Verifica si el prompt contiene contenido inapropiado utilizando la API de Moderaci√≥n de OpenAI."""
    try:
        response = client.moderations.create(input=prompt)
        logging.info(f"Moderation API response: {response}")
        moderation_result = response.results[0]
        # Verifica si est√° marcado como inapropiado
        if moderation_result.flagged:
            return True
        else:
            return False
    except Exception as e:
        logging.error(f"Error al llamar a la API de Moderaci√≥n: {e}")
        return False

# Ajustar el tono del bot
def adjust_tone(tone="friendly"):
    """Ajustar el tono del bot seg√∫n las preferencias del cliente."""
    if tone == "formal":
        st.session_state["tone"] = "formal"
        return "Eres un asistente formal y educado."
    else:
        st.session_state["tone"] = "friendly"
        return "Eres un asistente amigable y relajado."

# Estado inicial de la conversaci√≥n
initial_state = [
    {"role": "system", "content": get_system_prompt(maestros, estudiantes)},
    {
        "role": "assistant",
        "content": f"¬°Hola! Soy tu asistente virtual para elegir la especialidad ideal en Ingenier√≠a Inform√°tica. Para comenzar, cu√©ntame un poco sobre ti.",
    },
]

if "messages" not in st.session_state:
    st.session_state["messages"] = deepcopy(initial_state)

# Bot√≥n para eliminar conversaci√≥n
clear_button = st.button("Eliminar conversaci√≥n", key="clear")
if clear_button:
    st.session_state["messages"] = deepcopy(initial_state)

# Mostrar mensajes de chat desde el historial al recargar la aplicaci√≥n
for message in st.session_state["messages"]:
    if message["role"] == "system":
        continue
    elif message["role"] == "assistant":
        with st.chat_message(message["role"], avatar="üë®‚Äçüíª"):
            st.markdown(message["content"])
    else:
        with st.chat_message(message["role"], avatar="üë§"):
            st.markdown(message["content"])

# Entrada del usuario
if prompt := st.chat_input():
    # Verificar si el contenido es inapropiado
    if check_for_inappropriate_content(prompt):
        with st.chat_message("assistant", avatar="üë®‚Äçüíª"):
            st.markdown("Por favor, mantengamos la conversaci√≥n respetuosa.")
    else:
        with st.chat_message("user", avatar="üë§"):
            st.markdown(prompt)
        output = generate_response(prompt)
        with st.chat_message("assistant", avatar="üë®‚Äçüíª"):
            st.markdown(output)
