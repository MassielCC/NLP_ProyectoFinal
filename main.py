import pandas as pd
import streamlit as st
from datetime import datetime
from copy import deepcopy
from openai import OpenAI
import csv
import re
import pytz
import json
import logging

# Configura el logger
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Inicializar el cliente de OpenAI con la clave API
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# Configuraci√≥n inicial de la p√°gina
st.set_page_config(page_title="Saz√≥nBot", page_icon=":pot_of_food:")
st.title("üë®‚ÄçüíªNova-Infor")

# Mensaje de bienvenida
intro = """¬°Bienvenido a Nova-Infor, tu consejero virtual"""
st.markdown(intro)

# Cargar desde un archivo CSV
def load(file_path):
    """Cargar el men√∫ desde un archivo CSV con columnas Plato, Descripci√≥n y Precio."""
    load = pd.read_csv(file_path)
    return load

def get_system_prompt(maestros, estudiantes):
    """Define el prompt del sistema para un chatbot consejero de especialidades en Ingenier√≠a Inform√°tica."""
    system_prompt = """
    Eres un chatbot experto en orientaci√≥n acad√©mica para estudiantes de Ingenier√≠a Inform√°tica. Tu objetivo es ayudar a los estudiantes a descubrir su especialidad ideal dentro de la carrera, bas√°ndote exclusivamente en sus intereses, habilidades y metas profesionales, as√≠ como en la experiencia de los profesores. **Toda la informaci√≥n que utilices debe estar basada en los datos proporcionados sobre los profesores y los estudiantes.**

    **Instrucciones clave:**

    1. **Basado en datos reales:** Todas tus respuestas deben estar fundamentadas exclusivamente en la informaci√≥n contenida en los datos de los profesores y estudiantes. No generes ni inventes informaci√≥n no contenida en las bases de datos.
    
    2. **Personalizaci√≥n completa:** Aseg√∫rate de adaptar las respuestas espec√≠ficamente a cada estudiante, bas√°ndote en la informaci√≥n individual que posees sobre sus intereses y objetivos profesionales. Utiliza los datos proporcionados para personalizar cada recomendaci√≥n.

    3. **Experiencia de los profesores:** Cuando un estudiante manifieste inter√©s por una especialidad, busca en la base de datos a aquellos profesores que tienen experiencia en esa √°rea. Comparte sus experiencias de forma objetiva y clara.

    4. **Ejemplos de otros estudiantes:** Si es relevante, puedes mencionar a otros estudiantes con intereses similares que hayan elegido una especialidad y c√≥mo esa elecci√≥n les ha ayudado a alcanzar sus metas profesionales. No hagas generalizaciones, solo menciona casos verificados y basados en los datos.

    5. **Claridad y concisi√≥n:** Presenta la informaci√≥n de manera clara y directa, evitando tecnicismos innecesarios. El objetivo es facilitar una comprensi√≥n clara del camino a seguir para cada estudiante.

    6. **Ayuda en la toma de decisiones:** El objetivo es proporcionar al estudiante una visi√≥n clara de las diferentes opciones de especialidades disponibles y sus posibles implicaciones, de manera que pueda tomar una decisi√≥n informada.

    **Base de datos:**
    * **Maestros:** {maestros}
    * **Estudiantes:** {estudiantes}

    **Ejemplo de interacci√≥n:**

    * **Estudiante:** "Estoy interesado en la inteligencia artificial y me gustar√≠a saber m√°s sobre las oportunidades laborales en esta √°rea."
    * **Chatbot:** "La inteligencia artificial es un campo con gran potencial laboral. Seg√∫n nuestra base de datos, varios egresados que se especializaron en esta √°rea han encontrado empleo en empresas como [nombre de empresas]. El profesor [nombre del profesor] tiene experiencia en [√°rea espec√≠fica] y ha estado investigando aplicaciones de la inteligencia artificial en el sector de la salud. ¬øTe gustar√≠a conocer m√°s sobre su investigaci√≥n o sobre las oportunidades en esa √°rea?"

    **Consideraciones adicionales:**

    * **Privacidad:** Aseg√∫rate de respetar la privacidad de todos los estudiantes y profesores. No reveles ni utilices informaci√≥n personal no autorizada.
    
    * **Precisi√≥n y actualidad:** Siempre que sea posible, aseg√∫rate de que los datos sean precisos y est√©n actualizados para proporcionar la informaci√≥n m√°s relevante. Si alg√∫n dato no est√° disponible o es incierto, s√© transparente sobre ello y no especules.

    """
    return system_prompt.replace("\n", " ")


def generate_response(prompt, temperature=0, max_tokens=1000):
    """Enviar el prompt a OpenAI y devolver la respuesta con un l√≠mite de tokens."""
    st.session_state["messages"].append({"role": "user", "content": prompt})

    completion = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=st.session_state["messages"],
        temperature=temperature,
        max_tokens=max_tokens,
        stream=False,
    )
    response = completion.choices[0].message.content
    st.session_state["messages"].append({"role": "assistant", "content": response})
    return response

# Funci√≥n para verificar contenido inapropiado
def check_for_inappropriate_content(prompt):
    """Verifica si el prompt contiene contenido inapropiado utilizando la API de Moderaci√≥n de OpenAI."""
    try:
        response = client.moderations.create(input=prompt)
        logging.info(f"Moderation API response: {response}")
        moderation_result = response.results[0]
        # Verifica si est√° marcado como inapropiado
        if moderation_result.flagged:
            return True
        else:
            return False
    except Exception as e:
        logging.error(f"Error al llamar a la API de Moderaci√≥n: {e}")
        return False

# Ajustar el tono del bot
def adjust_tone(tone="friendly"):
    """Ajustar el tono del bot seg√∫n las preferencias del cliente."""
    if tone == "formal":
        st.session_state["tone"] = "formal"
        return "Eres un asistente formal y educado."
    else:
        st.session_state["tone"] = "friendly"
        return "Eres un asistente amigable y relajado."

# Estado inicial de la conversaci√≥n
initial_state = [
    {"role": "system", "content": get_system_prompt(maestros, estudiantes)},
    {
        "role": "assistant",
        "content": f"¬°Hola! Soy tu asistente virtual para elegir la especialidad ideal en Ingenier√≠a Inform√°tica. Para comenzar, cu√©ntame un poco sobre ti.",
    },
]

if "messages" not in st.session_state:
    st.session_state["messages"] = deepcopy(initial_state)

# Bot√≥n para eliminar conversaci√≥n
clear_button = st.button("Eliminar conversaci√≥n", key="clear")
if clear_button:
    st.session_state["messages"] = deepcopy(initial_state)

# Mostrar mensajes de chat desde el historial al recargar la aplicaci√≥n
for message in st.session_state["messages"]:
    if message["role"] == "system":
        continue
    elif message["role"] == "assistant":
        with st.chat_message(message["role"], avatar="üë®‚Äçüíª"):
            st.markdown(message["content"])
    else:
        with st.chat_message(message["role"], avatar="üë§"):
            st.markdown(message["content"])

# Entrada del usuario
if prompt := st.chat_input():
    # Verificar si el contenido es inapropiado
    if check_for_inappropriate_content(prompt):
        with st.chat_message("assistant", avatar="üë®‚Äçüíª"):
            st.markdown("Por favor, mantengamos la conversaci√≥n respetuosa.")
    else:
        with st.chat_message("user", avatar="üë§"):
            st.markdown(prompt)
        output = generate_response(prompt)
        with st.chat_message("assistant", avatar="üë®‚Äçüíª"):
            st.markdown(output)
