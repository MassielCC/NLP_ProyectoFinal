import pandas as pd
import streamlit as st
from datetime import datetime
from copy import deepcopy
from openai import OpenAI
import csv
import re
import pytz
import json
import logging

# Configura el logger
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Inicializar el cliente de OpenAI con la clave API
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# Configuraci√≥n inicial de la p√°gina
st.set_page_config(page_title="Saz√≥nBot", page_icon=":pot_of_food:")
st.title("üë®‚ÄçüíªNova-Infor")

# Mensaje de bienvenida
intro = """¬°Bienvenido a Nova-Infor, tu consejero virtual"""
st.markdown(intro)

# Cargar desde un archivo CSV
def load(file_path):
    """Cargar el men√∫ desde un archivo CSV con columnas Plato, Descripci√≥n y Precio."""
    load = pd.read_csv(file_path)
    return load
# Cargar¬†

maestros = load("Entrevistas_maestros.csv")
estudiantes = load("Entrevistas_estudiantes.csv")

def get_system_prompt(maestros, estudiantes):
    """Define el prompt del sistema para un chatbot consejero de especialidades en Ingenier√≠a Inform√°tica."""
    system_prompt = f"""
    Eres un chatbot experto en orientaci√≥n acad√©mica para estudiantes de Ingenier√≠a Inform√°tica. Tu objetivo es ayudar a los estudiantes a descubrir su especialidad ideal dentro de la carrera, bas√°ndote exclusivamente en los datos proporcionados en los archivos: {maestros} y {estudiantes}. **No debes inventar ni crear informaci√≥n ni experiencias adicionales. Todo lo que compartas debe ser directamente derivado de estos datos.**
    Aqu√≠ tienes un archivo CSV de {maestros} con la siguiente estructura:
    - Primera columna: preguntas.
    - Segunda columna: respuestas del Profesor A.
    - Tercera columna: respuestas del Profesor B.

    Cuando respondas, sigue estas reglas:
    - Usa √∫nicamente las respuestas del profesor solicitado.
    - Si no se especifica un profesor, pregunta al usuario cu√°l profesor debe responder.
    - No combines respuestas de diferentes profesores.
    - Si no hay una respuesta disponible para el profesor seleccionado, indica que no existe esa informaci√≥n.

    **Instrucciones clave:**

    1. **Solo utiliza los datos disponibles:** Todas tus respuestas deben basarse √∫nicamente en los datos contenidos en los archivos proporcionados de: {estudiantes} y {maestros}. No debes inventar ni generar ninguna historia o experiencia adicional fuera de los datos proporcionados. Si no tienes informaci√≥n suficiente en los datos, di que no tienes la respuesta o que la informaci√≥n no est√° disponible.

    2. **Personalizaci√≥n basada en datos:** Adapta las respuestas a los intereses y metas del estudiante, utilizando solo la informaci√≥n disponible en los archivos de: {maestros} o {estudiantes}. No debes agregar detalles o experiencias no contenidas en los archivos.

    3. **Experiencias de los profesores:** Si un estudiante est√° interesado en una especialidad, consulta los datos en el archivo de {maestros} para proporcionarles informaci√≥n sobre los docentes que tienen experiencia en esa √°rea. Si no hay informaci√≥n disponible, indica que no puedes proporcionar detalles sobre ese tema. No inventes ni hagas suposiciones.

    4. **Ejemplos de estudiantes similares:** Si es relevante, puedes mencionar que otros estudiantes con intereses similares han elegido una especialidad, pero solo si esa informaci√≥n est√° disponible en los archivos. Si no tienes datos sobre otros estudiantes en esa √°rea, no hagas suposiciones ni inventes ejemplos.

    5. **Claridad y concisi√≥n:** Presenta la informaci√≥n de manera clara, directa y basada exclusivamente en los datos disponibles. Si no tienes datos relevantes, di que no tienes la informaci√≥n. Evita agregar interpretaciones o detalles no solicitados.

    6. **Ayuda para la toma de decisiones:** El objetivo es ayudar al estudiante a tomar decisiones informadas, proporcionando una visi√≥n clara de las especialidades disponibles y bas√°ndote √∫nicamente en la informaci√≥n verificada en los archivos. Si no tienes informaci√≥n suficiente sobre una especialidad o √°rea, indica que no puedes proporcionar m√°s detalles.

    **Ejemplo de interacci√≥n:**

    * **Estudiante:** "Estoy interesado en la inteligencia artificial y me gustar√≠a saber m√°s sobre las oportunidades laborales en esta √°rea."
    * **Chatbot:** "La inteligencia artificial es un campo con gran potencial. Seg√∫n los datos que tenemos, algunos profesores tienen experiencia en este √°rea. Sin embargo, no tenemos informaci√≥n sobre las empresas espec√≠ficas en las que trabajan. El profesor [Alias] tiene experiencia en [√°rea espec√≠fica] dentro de la inteligencia artificial. ¬øTe gustar√≠a saber m√°s sobre sus proyectos o investigaciones?"

    **Consideraciones adicionales:**

    * **Precisi√≥n y actualizaci√≥n:** Aseg√∫rate de que toda la informaci√≥n proporcionada est√© actualizada y sea precisa seg√∫n los archivos de datos. Si alg√∫n dato est√° ausente o es incierto, no inventes detalles adicionales ni especules. Si no tienes informaci√≥n, es mejor ser honesto y decir que no tienes los datos disponibles.
    """

    return system_prompt.replace("\n", " ")

def generate_response(prompt, temperature=0.1, max_tokens=1000):
    """Enviar el prompt a OpenAI y devolver la respuesta con un l√≠mite de tokens."""
    st.session_state["messages"].append({"role": "user", "content": prompt})

    completion = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=st.session_state["messages"],
        temperature=temperature,
        max_tokens=max_tokens,
        stream=False,
    )
    response = completion.choices[0].message.content
    st.session_state["messages"].append({"role": "assistant", "content": response})
    return response

# Funci√≥n para verificar contenido inapropiado
def check_for_inappropriate_content(prompt):
    """Verifica si el prompt contiene contenido inapropiado utilizando la API de Moderaci√≥n de OpenAI."""
    try:
        response = client.moderations.create(input=prompt)
        logging.info(f"Moderation API response: {response}")
        moderation_result = response.results[0]
        # Verifica si est√° marcado como inapropiado
        if moderation_result.flagged:
            return True
        else:
            return False
    except Exception as e:
        logging.error(f"Error al llamar a la API de Moderaci√≥n: {e}")
        return False

# Ajustar el tono del bot
def adjust_tone(tone="friendly"):
    """Ajustar el tono del bot seg√∫n las preferencias del cliente."""
    if tone == "formal":
        st.session_state["tone"] = "formal"
        return "Eres un asistente formal y educado."
    else:
        st.session_state["tone"] = "friendly"
        return "Eres un asistente amigable y relajado."

# Estado inicial de la conversaci√≥n
initial_state = [
    {"role": "system", "content": get_system_prompt(maestros, estudiantes)},
    {
        "role": "assistant",
        "content": f"¬°Hola! Soy tu asistente virtual para elegir la especialidad ideal en Ingenier√≠a Inform√°tica. Para comenzar, cu√©ntame un poco sobre ti.",
    },
]

if "messages" not in st.session_state:
    st.session_state["messages"] = deepcopy(initial_state)

# Bot√≥n para eliminar conversaci√≥n
clear_button = st.button("Eliminar conversaci√≥n", key="clear")
if clear_button:
    st.session_state["messages"] = deepcopy(initial_state)

# Mostrar mensajes de chat desde el historial al recargar la aplicaci√≥n
for message in st.session_state["messages"]:
    if message["role"] == "system":
        continue
    elif message["role"] == "assistant":
        with st.chat_message(message["role"], avatar="üë®‚Äçüíª"):
            st.markdown(message["content"])
    else:
        with st.chat_message(message["role"], avatar="üë§"):
            st.markdown(message["content"])

# Entrada del usuario
if prompt := st.chat_input():
    # Verificar si el contenido es inapropiado
    if check_for_inappropriate_content(prompt):
        with st.chat_message("assistant", avatar="üë®‚Äçüíª"):
            st.markdown("Por favor, mantengamos la conversaci√≥n respetuosa.")
    else:
        with st.chat_message("user", avatar="üë§"):
            st.markdown(prompt)
        output = generate_response(prompt)
        with st.chat_message("assistant", avatar="üë®‚Äçüíª"):
            st.markdown(output)
