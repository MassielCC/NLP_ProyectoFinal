import pandas as pd
import streamlit as st
from datetime import datetime
from copy import deepcopy
from openai import OpenAI
import csv
import re
import pytz
import json
import logging

# Configura el logger
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Inicializar el cliente de OpenAI con la clave API
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# Configuraci√≥n inicial de la p√°gina
st.set_page_config(page_title="Saz√≥nBot", page_icon=":pot_of_food:")
st.title("üë®‚ÄçüíªNova-Infor")

# Mensaje de bienvenida
intro = """¬°Bienvenido a Nova-Infor, tu consejero virtual"""
st.markdown(intro)

# Cargar desde un archivo CSV
def load(file_path):
    """Cargar el men√∫ desde un archivo CSV con columnas Plato, Descripci√≥n y Precio."""
    load = pd.read_csv(file_path)
    return load
# Cargar¬†

maestros = load("Entrevistas_maestros_ver2.csv")
estudiantes = load("Entrevistas_estudiantes.csv")

def get_system_prompt(maestros, estudiantes):
    """Define el prompt del sistema para un chatbot consejero de especialidades en Ingenier√≠a Inform√°tica."""
    system_prompt = f"""
    Eres un chatbot experto en orientaci√≥n acad√©mica para estudiantes de Ingenier√≠a Inform√°tica. Tu tarea es ayudar a los estudiantes a descubrir su especialidad ideal dentro de la carrera, utilizando exclusivamente los datos proporcionados en los archivos CSV de **maestros** y **estudiantes**.

El archivo **maestros** contiene las respuestas y opiniones de diferentes profesores, donde:
- Cada columna del archivo representa un profesor diferente.
- Las filas contienen informaci√≥n como experiencia profesional, especialidad, logros acad√©micos, entre otros.
- Las √°reas de especializaci√≥n est√°n descritas en el contenido de las celdas. Debes extraer la informaci√≥n seg√∫n la columna (profesor) consultada.

### Instrucciones clave:

1. **Uso exclusivo de los datos disponibles:**
   Todas tus respuestas deben basarse en los datos contenidos en los archivos proporcionados de **maestros** y **estudiantes**. No debes inventar ni agregar informaci√≥n no contenida en los archivos.

2. **Interpretaci√≥n del archivo CSV de profesores:**
   - Cada columna en el archivo **maestros** representa las respuestas de un profesor espec√≠fico. 
   - Si un estudiante te pide informaci√≥n de un profesor en particular (por ejemplo, "Profesor A"), debes limitarte a extraer datos solo de esa columna.
   - Si el estudiante no especifica el profesor, p√≠dele que elija uno de los disponibles.
   - Si una pregunta sobre un √°rea espec√≠fica de la ingenier√≠a (por ejemplo, "Machine Learning") es realizada, debes buscar en las respuestas de los profesores para ver si alguno menciona esa √°rea y proporcionar la informaci√≥n encontrada en su respectiva columna.

3. **Personalizaci√≥n basada en datos:**
   Las respuestas deben estar adaptadas a los intereses del estudiante, utilizando solo la informaci√≥n disponible. No debes agregar detalles adicionales que no est√©n en el archivo.

4. **Respuestas por especialidad:**
   Si el estudiante est√° interesado en una especialidad (por ejemplo, "Ciencias de la Computaci√≥n" o "Ingenier√≠a Financiera"), consulta el archivo para identificar a los profesores que mencionan experiencia en esa √°rea. 
   
5. **Formato de respuesta:**
   Cuando respondas, hazlo de manera clara y concisa, siempre citando al profesor correspondiente. Por ejemplo: 
   - "El profesor A menciona que ha trabajado durante 7 a√±os en Machine Learning y Visi√≥n Computacional desde 2013."
   - "El profesor B tiene experiencia en Inteligencia Artificial y Ciencias de Datos, con √©nfasis en an√°lisis estad√≠stico y matem√°tico."

6. **No combinar respuestas:** 
   No combines respuestas de diferentes profesores a menos que el estudiante te lo solicite expl√≠citamente. Si el profesor solicitado no tiene informaci√≥n disponible sobre un tema espec√≠fico, ind√≠calo claramente.

7. **Ejemplo de interacci√≥n:**
   * **Estudiante:** "Estoy interesado en inteligencia artificial. ¬øQu√© profesor me recomendar√≠as?"
   * **Chatbot:** "El profesor A menciona que tiene experiencia en Machine Learning y Visi√≥n Computacional desde 2013. El profesor B ha trabajado en Inteligencia Artificial y Ciencias de Datos. ¬øTe gustar√≠a saber m√°s sobre sus proyectos o investigaciones?"

8. **Claridad y concisi√≥n:** 
   Responde con informaci√≥n clara y directa. Si no tienes datos suficientes sobre una pregunta espec√≠fica, di que la informaci√≥n no est√° disponible.

9. **Ayuda para la toma de decisiones:**
   El objetivo es ayudar al estudiante a tomar decisiones informadas sobre su especialidad, bas√°ndote en la informaci√≥n disponible en el archivo de maestros. Si no tienes suficiente informaci√≥n, s√© honesto y di que no puedes proporcionar detalles adicionales.

10. **Ejemplo de datos CSV:**
   Aqu√≠ tienes un ejemplo del archivo CSV de profesores:
   - Columna 1: Profesor A: "En 2017, comenc√© a trabajar en Machine Learning..."
   - Columna 2: Profesor B: "Mis √°reas de especializaci√≥n son Inteligencia Artificial y Data Science..."
   - Columna 3: Profesor C: "He trabajado en Ingenier√≠a Financiera y resoluci√≥n de problemas estad√≠sticos..."
    """

    return system_prompt.replace("\n", " ")

def generate_response(prompt, temperature=0.5, max_tokens=1000):
    """Enviar el prompt a OpenAI y devolver la respuesta con un l√≠mite de tokens."""
    st.session_state["messages"].append({"role": "user", "content": prompt})

    completion = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=st.session_state["messages"],
        temperature=temperature,
        max_tokens=max_tokens,
        stream=False,
    )
    response = completion.choices[0].message.content
    st.session_state["messages"].append({"role": "assistant", "content": response})
    return response

# Funci√≥n para verificar contenido inapropiado
def check_for_inappropriate_content(prompt):
    """Verifica si el prompt contiene contenido inapropiado utilizando la API de Moderaci√≥n de OpenAI."""
    try:
        response = client.moderations.create(input=prompt)
        logging.info(f"Moderation API response: {response}")
        moderation_result = response.results[0]
        # Verifica si est√° marcado como inapropiado
        if moderation_result.flagged:
            return True
        else:
            return False
    except Exception as e:
        logging.error(f"Error al llamar a la API de Moderaci√≥n: {e}")
        return False

# Ajustar el tono del bot
def adjust_tone(tone="friendly"):
    """Ajustar el tono del bot seg√∫n las preferencias del cliente."""
    if tone == "formal":
        st.session_state["tone"] = "formal"
        return "Eres un asistente formal y educado."
    else:
        st.session_state["tone"] = "friendly"
        return "Eres un asistente amigable y relajado."

# Estado inicial de la conversaci√≥n
initial_state = [
    {"role": "system", "content": get_system_prompt(maestros, estudiantes)},
    {
        "role": "assistant",
        "content": f"¬°Hola! Soy tu asistente virtual para elegir la especialidad ideal en Ingenier√≠a Inform√°tica. Para comenzar, cu√©ntame un poco sobre ti.",
    },
]

if "messages" not in st.session_state:
    st.session_state["messages"] = deepcopy(initial_state)

# Bot√≥n para eliminar conversaci√≥n
clear_button = st.button("Eliminar conversaci√≥n", key="clear")
if clear_button:
    st.session_state["messages"] = deepcopy(initial_state)

# Mostrar mensajes de chat desde el historial al recargar la aplicaci√≥n
for message in st.session_state["messages"]:
    if message["role"] == "system":
        continue
    elif message["role"] == "assistant":
        with st.chat_message(message["role"], avatar="üë®‚Äçüíª"):
            st.markdown(message["content"])
    else:
        with st.chat_message(message["role"], avatar="üë§"):
            st.markdown(message["content"])

# Entrada del usuario
if prompt := st.chat_input():
    # Verificar si el contenido es inapropiado
    if check_for_inappropriate_content(prompt):
        with st.chat_message("assistant", avatar="üë®‚Äçüíª"):
            st.markdown("Por favor, mantengamos la conversaci√≥n respetuosa.")
    else:
        with st.chat_message("user", avatar="üë§"):
            st.markdown(prompt)
        output = generate_response(prompt)
        with st.chat_message("assistant", avatar="üë®‚Äçüíª"):
            st.markdown(output)
